// Copyright 2022 The gce-metadata-server Authors
// SPDX-License-Identifier: BSD-3-Clause

package fakemetadata

import (
	"net/http"
)

// InstanceHandler holds instance metadata handlers.
//
// See: https://cloud.google.com/compute/docs/metadata/default-metadata-values#vm_instance_metadata
type InstanceHandler struct{}

// InstanceAttributeMap map of instance attributes.
//
// See: https://cloud.google.com/compute/docs/metadata/default-metadata-values#instance-attributes-metadata
var InstanceAttributeMap = map[string]bool{
	// Enables or disables SSH key management on your VM.
	//
	// For more information about OS Login, see Setting up OS Login.
	"enable-oslogin": true,

	// Enable zonal DNS and global DNS for the VM.
	//
	// For more information about internal DNS names, see Configuring DNS names.
	"vmdnssetting": true,

	// If you are managing SSH keys using metadata, this attribute lets you configure public SSH keys that can connect to VMs in this project.
	// If there are multiple SSH keys, each key is separated by a newline character (\n). The value of the ssh-keys attribute is a string.
	//
	// Example: "user1:ssh-rsa mypublickey user1@host.com\nuser2:ssh-rsa mypublickey user2@host.com"
	//
	// SSH keys managed by OS Login aren't visible in metadata.
	"ssh-keys": true,
}

// InstanceGuestAttributeMap map of instance guest attributes.
//
// See: https://cloud.google.com/compute/docs/metadata/default-metadata-values#instance-guest-attributes-metadata
var InstanceGuestAttributeMap = map[string]bool{
	// Stores OS inventory for the VM.
	//
	// Collects and stores OS details information. This includes information such as hostname, kernel version, architecture, and installed packages details.
	//
	// For more information about OS inventory, see Viewing operating system details.
	"guestInventory": true,

	// Stores SSH host keys. Host keys can be used to identify a particular host or machine.
	//
	// For information host keys, see Storing host keys by enabling guest attributes.
	"hostkeys": true,
}

// Attributes a directory of custom metadata values passed to the VM during startup or shutdown.
// These custom values can either be Google Cloud attributes or user-created metadata values.
//
// For a list of instance-level Google Cloud attributes that you can set, see Instance attributes.
//
// For more information about setting custom metadata, see Setting custom metadata.
func (h *InstanceHandler) Attributes(w http.ResponseWriter, r *http.Request) {} // directory

// CPUPlatform CPU platform of the VM.
//
// For information about CPU platforms, see CPU platforms.
func (h *InstanceHandler) CPUPlatform(w http.ResponseWriter, r *http.Request) {}

// Description is the free-text description of an instance that is assigned using the "--description" flag by using the Google Cloud CLI or the API.
func (h *InstanceHandler) Description(w http.ResponseWriter, r *http.Request) {}

// Disks a directory of disks that are attached to the VM.
//
// For each disk, the following information is available:
//
// device-name
// index
// interface
// mode
// type
//
// For more information about disks, see Storage options.
func (h *InstanceHandler) Disks(w http.ResponseWriter, r *http.Request) {} // directory

// GuestAttributes sets guest attributes for the VM. These custom values can either be Google Cloud attributes or user-created metadata values.
//
// For a list of instance-level Google Cloud attributes that you can set, see Instance guest attributes.
//
// Note: Any user or process on your VM instance can read and write to the namespaces and keys in guest-attributes metadata.
//
// For more information about guest attributes, see Setting and querying guest attributes.
func (h *InstanceHandler) GuestAttributes(w http.ResponseWriter, r *http.Request) {} // directory

// Hostname is the hostname of the VM.
func (h *InstanceHandler) Hostname(w http.ResponseWriter, r *http.Request) {}

// ID the ID of the VM. This is a unique, numerical ID that is generated by Compute Engine. This is useful for identifying VMs if you don't use VM names.
func (h *InstanceHandler) ID(w http.ResponseWriter, r *http.Request) {}

// Image is the operating system image used by the VM. This value has the following format:
//
//	projects/IMAGE_PROJECT/global/images/IMAGE_NAME
func (h *InstanceHandler) Image(w http.ResponseWriter, r *http.Request) {}

// LegacyEndpointAccess stores the list of legacy endpoints. Values are 0.1 and v1beta1.
func (h *InstanceHandler) LegacyEndpointAccess(w http.ResponseWriter, r *http.Request) {}

// Licenses a list of license code IDs that are used to attach the licenses to images, snapshots, and disks.
func (h *InstanceHandler) Licenses(w http.ResponseWriter, r *http.Request) {} // directory

// MachineType is the machine type for this VM. This value has the following format: projects/PROJECT_NUM/machineTypes/MACHINE_TYPE
func (h *InstanceHandler) MachineType(w http.ResponseWriter, r *http.Request) {}

// MaintenanceEvent indicates whether a maintenance event is affecting this VM. For more information, see Live migrate.
func (h *InstanceHandler) MaintenanceEvent(w http.ResponseWriter, r *http.Request) {}

// Name is the name of the VM.
func (h *InstanceHandler) Name(w http.ResponseWriter, r *http.Request) {}

// NetworkInterfaces a directory of network interfaces. For each network interface the following information is available:
//
//	access-configs/
//	  external-ip
//	  type
//	dns-servers
//	forwarded-ips/
//	gateway
//	ip
//	ip-aliases/
//	mac
//	mtu
//	network
//	subnetmask
//	target-instance-ips
//
// For more information about network interfaces, see Multiple network interfaces overview.
func (h *InstanceHandler) NetworkInterfaces(w http.ResponseWriter, r *http.Request) {} // directory

// Preempted a boolean value that indicates whether a VM is about to be preempted.
func (h *InstanceHandler) Preempted(w http.ResponseWriter, r *http.Request) {}

// Scheduling sets the scheduling options for the VM.
//
// Scheduling metadata values include the following:
//
//	on-host-maintenance
//
// indicates whether the VM terminates or live migrates during host maintenance.
//
//	automatic-restart
//
// If this value is TRUE, the VM automatically restarts after a maintenance event or crash.
//
//	preemptible
//
// If this value is TRUE, the VM is preemptible. This value is set when you create a VM, and it can't be changed.
//
// For more information about scheduling options, see Setting instance availability policies.
func (h *InstanceHandler) Scheduling(w http.ResponseWriter, r *http.Request) {}

// ServiceAccounts a directory of service accounts associated with the VM. For each service account, the following information is available:
//
//	aliases
//
// The service accounts alias.
//
//	email
//
// The email address for the service account.
//
//	identity
//
// A JSON Web Token that is unique to the VM. You must include the audience parameter in your request for this VM metadata value. For example, "?audience=http://www.example.com".
//
// For information about how to request and verify instance identity tokens, see Verifying the identity of instances.
//
//	scopes
//
// The access scopes assigned to the service account.
//
//	token
//
// The OAuth2 access token that can be used to authenticate applications.
//
// For information about access tokens, see Authenticating applications directly with access tokens.
//
// For more information about service accounts, see Creating and enabling service accounts for instances.
func (h *InstanceHandler) ServiceAccounts(w http.ResponseWriter, r *http.Request) {} // directory

// Tags lists any network tags associated with the VM.
//
// For more information about network tags, see Configuring network tags.
func (h *InstanceHandler) Tags(w http.ResponseWriter, r *http.Request) {}

// Zone is the zone where this VM is located.
//
// This value has the following format: projects/PROJECT_NUM/zones/ZONE.
func (h *InstanceHandler) Zone(w http.ResponseWriter, r *http.Request) {}
